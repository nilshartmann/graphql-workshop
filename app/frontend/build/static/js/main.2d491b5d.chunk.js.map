{"version":3,"sources":["components/form/Form.module.scss","components/Button.module.scss","TaskPage/TaskPage.module.scss","ProjectApp/ProjectApp.module.scss","components/ButtonBar.module.scss","components/Card.module.scss","TasksListPage/TaskListPage.module.scss","components/Cardboard.module.scss","AddTaskPage/AddTaskPage.module.scss","ProjectsPage/ProjectsPage.module.scss","components/NavButton.module.scss","infra/createApolloClient.tsx","infra/NavigationProvider.tsx","components/form/Form.tsx","components/form/Input.tsx","components/form/TextArea.tsx","components/form/Select.tsx","components/ButtonBar.tsx","components/Button.tsx","AddTaskPage/AddTaskForm.tsx","AddTaskPage/AddTaskPage.tsx","components/NavButton.tsx","ProjectsPage/ProjectsPage.tsx","global-query-types.ts","util/mapper.ts","TasksListPage/TaskListPage.tsx","components/Cardboard.tsx","components/Card.tsx","TaskPage/TaskView.tsx","TaskPage/TaskPageHeader.tsx","TaskPage/TaskPage.tsx","ProjectApp/ProjectApp.tsx","index.tsx"],"names":["module","exports","Form","Input","TextArea","Select","Button","secondary","tertiary","Icon","TaskPage","TaskStateCardboard","ProjectApp","Header","Footer","ButtonBar","left","Card","CardLabel","CardTitle","TaskListPage","Cardboard","AddTaskPage","ProjectsPage","NavButton","APOLLO_URL","APOLLO_WS_URL","NavigationContext","React","openRootPage","openTasksPage","project","openTaskPage","projectId","taskId","openAddTaskPage","NavigationProvider","_this","props","history","push","concat","react","Provider","value","this","children","withRouter","useNavigator","_ref","className","styles","label","onChange","type","_onChange","_x","apply","arguments","toString","e","currentTarget","rows","options","onNewValue","map","option","key","icon","onClick","disabled","buttonClassName","index_esm","parseDate","dateString","date","moment","isValid","toISOString","AddTaskForm","users","onSave","onCancel","_React$useState","_React$useState2","Object","slicedToArray","title","setTitle","_React$useState3","_React$useState4","description","setDescription","_React$useState5","_React$useState6","assigneeId","setAssigneeId","_React$useState7","_React$useState8","toBeFinishedAt","setToBeFinishedAt","assignSelectOptions","u","name","id","buttonDisabled","ADD_TASK_PAGE_QUERY","gql","_templateObject","ADD_TASK_MUTATION","_templateObject2","withApollo","match","params","navigator","react_components_esm","query","variables","_ref2","loading","error","data","console","mutation","onCompleted","addTask","newTask","ChevronRight","PROJECTS_PAGE_QUERY","ProjectsPage_templateObject","ProjectsTable","projects","owner","category","TaskState","mapTaskState","taskState","FINISHED","NEW","RUNNING","warn","TASK_LIST_PAGE_QUERY","TaskListPage_templateObject","TASK_CHANGE_SUBSCRIPTION","TaskListPage_templateObject2","TasksTable","tasks","task","assignee","state","_useQuery","useQuery","fetchPolicy","subscribeToMore","document","react_router_dom","to","cardboardClassName","InfoCard","actions","cardActions","a","ix","onExecute","TaskView","onTaskStateChange","finishedUntilString","format","TaskPageHeader","projectListLink","titleLink","titleElement","TASK_QUERY","TaskPage_templateObject","UPDATE_TASK_STATE_MUTATION","TaskPage_templateObject2","_useMutation","useMutation","runChangeTaskState","_changeTaskState","asyncToGenerator","regenerator_default","mark","_callee","newState","wrap","_context","prev","next","stop","_x2","href","target","rel","client","react_router","exact","path","component","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","remoteLink","split","def","getMainDefinition","kind","operation","errorLink","onError","graphQLErrors","networkError","_ref3","message","locations","JSON","stringify","log","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","createApolloClient","theApp","react_common_esm","infra_NavigationProvider","ProjectApp_ProjectApp","mountNode","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2d491b5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__35evd\",\"Input\":\"Form_Input__2yNBJ\",\"TextArea\":\"Form_TextArea__nERNY\",\"Select\":\"Form_Select__2aztZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__30-l0\",\"secondary\":\"Button_secondary__1sG9u\",\"tertiary\":\"Button_tertiary__46w0_\",\"Icon\":\"Button_Icon__3NC72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskPage\":\"TaskPage_TaskPage__dsmbv\",\"TaskStateCardboard\":\"TaskPage_TaskStateCardboard__nXgV7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProjectApp\":\"ProjectApp_ProjectApp__28aRI\",\"Header\":\"ProjectApp_Header__73DdP\",\"Footer\":\"ProjectApp_Footer__3qiv9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonBar\":\"ButtonBar_ButtonBar__3Hlhu\",\"left\":\"ButtonBar_left__2MPMI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__3Le3B\",\"CardLabel\":\"Card_CardLabel__2UMay\",\"CardTitle\":\"Card_CardTitle__1EI_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskListPage\":\"TaskListPage_TaskListPage__2FQUe\",\"ButtonBar\":\"TaskListPage_ButtonBar__2bogz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cardboard\":\"Cardboard_Cardboard__2C6gP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddTaskPage\":\"AddTaskPage_AddTaskPage__1WbrF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProjectsPage\":\"ProjectsPage_ProjectsPage__jp7SS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavButton\":\"NavButton_NavButton__TPecM\"};","import { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { split } from \"apollo-link\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { onError } from \"apollo-link-error\";\nimport { ApolloLink } from \"apollo-link\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\n\nconst APOLLO_URL = \"http://localhost:4000\";\nconst APOLLO_WS_URL = \"ws://localhost:4000/graphql\";\n\nexport default function createApolloClient() {\n  const httpLink = new HttpLink({\n    uri: APOLLO_URL\n  });\n\n  const wsLink = new WebSocketLink({\n    uri: APOLLO_WS_URL,\n    options: {\n      reconnect: true\n    }\n  });\n\n  // using the ability to split links, you can send data to each link\n  // depending on what kind of operation is being sent\n  const remoteLink = split(\n    // split based on operation type\n    ({ query }) => {\n      const def = getMainDefinition(query);\n      return def.kind === \"OperationDefinition\" && def.operation === \"subscription\";\n    },\n    wsLink,\n    httpLink\n  );\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      // eslint-disable-next-line\n      graphQLErrors.map(({ message, locations, path }) => {\n        console.error(`[GraphQL error]: ${message}`);\n        console.error(`LOCATIONS: ${JSON.stringify(locations)}`);\n        console.error(`PATH: ${JSON.stringify(path)}`);\n      });\n    }\n    if (networkError) {\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, remoteLink]),\n    cache: new InMemoryCache()\n  });\n}\n","import * as React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\ninterface NavigationContextType {\n  openRootPage(): void;\n  openTasksPage(project: string): void;\n  openTaskPage(projectId: string, taskId: string): void;\n  openAddTaskPage(projectId: string): void;\n}\n\nconst NavigationContext = React.createContext<NavigationContextType>({\n  openRootPage() {},\n  openTasksPage(project: string) {},\n  openTaskPage(projectId: string, taskId: string) {},\n  openAddTaskPage(projectId: string) {}\n});\n\ntype NavigationProviderProps = RouteComponentProps<{}>;\n\nclass NavigationProvider extends React.Component<NavigationProviderProps> {\n  openRootPage = () => {\n    this.props.history.push(``);\n  };\n\n  openTasksPage = (projectId: string) => {\n    this.props.history.push(`/project/${projectId}/tasks`);\n  };\n  openTaskPage = (projectId: string, taskId: string) => {\n    this.props.history.push(`/project/${projectId}/tasks/${taskId}`);\n  };\n\n  openAddTaskPage = (projectId: string) => {\n    this.props.history.push(`/project/${projectId}/addtaks`);\n  };\n\n  render() {\n    return (\n      <NavigationContext.Provider\n        value={{\n          openRootPage: this.openRootPage,\n          openTasksPage: this.openTasksPage,\n          openTaskPage: this.openTaskPage,\n          openAddTaskPage: this.openAddTaskPage\n        }}\n      >\n        {this.props.children}\n      </NavigationContext.Provider>\n    );\n  }\n}\n\nexport default withRouter(NavigationProvider);\n\nexport function useNavigator() {\n  return React.useContext(NavigationContext);\n}\n","import * as React from \"react\";\nimport styles from \"./Form.module.scss\";\n\ninterface FormProps {\n  children: React.ReactNode;\n}\n\nexport default function Form({ children }: FormProps) {\n  return <div className={styles.Form}>{children}</div>;\n}\n","import * as React from \"react\";\nimport styles from \"./Form.module.scss\";\n\ninterface InputProps {\n  label: string;\n  value: string;\n  onChange(newValue: string): void;\n}\n\nexport default function Input({ label, value, onChange }: InputProps) {\n  return (\n    <div className={styles.Input}>\n      <label>{label}</label>\n      <input type={\"text\"} value={value} onChange={e => onChange(e.currentTarget.value)} />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./Form.module.scss\";\n\ninterface TextAreaProps {\n  label: string;\n  value: string;\n  onChange(newValue: string): void;\n}\n\nexport default function TextArea({ label, value, onChange }: TextAreaProps) {\n  return (\n    <div className={styles.TextArea}>\n      <label>{label}</label>\n      <textarea rows={5} value={value} onChange={e => onChange(e.currentTarget.value)} />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./Form.module.scss\";\n\ninterface SelectOption {\n  value: string;\n  label: string;\n}\n\ninterface SelectProps {\n  label: string;\n  value: string;\n  options: SelectOption[];\n  onNewValue(newValue: string): void;\n}\n\nexport default function Select({ label, value, options, onNewValue }: SelectProps) {\n  function handleSelectChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const value = e.currentTarget.value;\n    if (\"UNSELECTED\" === value) {\n      onNewValue(\"\");\n    } else {\n      onNewValue(value);\n    }\n  }\n\n  return (\n    <div className={styles.Select}>\n      <label>{label}</label>\n      <select onChange={handleSelectChange} value={value === \"\" ? \"UNSELECTED\" : value}>\n        <option value={\"UNSELECTED\"} />\n        {options.map(option => (\n          <option key={option.value} value={option.value}>\n            {option.label}\n          </option>\n        ))}\n      </select>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./ButtonBar.module.scss\";\n\ntype ButtonBarProps = {\n  left?: boolean;\n  children: React.ReactNode;\n};\n\nexport default function ButtonBar({ left, children }: ButtonBarProps) {\n  const className = left ? `${styles.ButtonBar} ${styles.left}` : styles.ButtonBar;\n  return <div className={className}>{children}</div>;\n}\n","import * as React from \"react\";\nimport styles from \"./Button.module.scss\";\nimport Octicon, { Icon } from \"@primer/octicons-react\";\nimport { MouseEventHandler } from \"react\";\n\ninterface ButtonProps {\n  children: React.ReactNode;\n  secondary?: boolean;\n  tertiary?: boolean;\n  icon?: Icon;\n  onClick?: MouseEventHandler<HTMLButtonElement>;\n  disabled?: boolean;\n}\n\nexport default function Button({ children, icon, onClick, secondary, tertiary, disabled }: ButtonProps) {\n  const buttonClassName = secondary\n    ? `${styles.Button} ${styles.secondary}`\n    : tertiary\n    ? `${styles.Button} ${styles.tertiary}`\n    : styles.Button;\n\n  return (\n    <button className={buttonClassName} onClick={onClick} disabled={disabled}>\n      {children}\n      {icon && (\n        <span className={styles.Icon}>\n          <Octicon icon={icon} />\n        </span>\n      )}\n    </button>\n  );\n}\n","import * as React from \"react\";\nimport { Form, Input, Select, TextArea } from \"../components/form\";\nimport ButtonBar from \"../components/ButtonBar\";\nimport Button from \"../components/Button\";\nimport { AddTaskPageQuery_users } from \"./querytypes/AddTaskPageQuery\";\nimport { AddTaskInput } from \"../global-query-types\";\nimport moment from \"moment\";\n\ninterface AddTaskFormProps {\n  users: AddTaskPageQuery_users[];\n\n  onSave(newTask: AddTaskInput): void;\n  onCancel(): void;\n}\n\nfunction parseDate(dateString: string) {\n  if (dateString === \"\") {\n    return \"\";\n  }\n\n  const date = moment(dateString, \"DD.MM.YYYY\", true);\n\n  if (!date.isValid()) {\n    return \"\";\n  }\n\n  return date.toISOString(false);\n}\n\nexport function AddTaskForm({ users, onSave, onCancel }: AddTaskFormProps) {\n  const [title, setTitle] = React.useState(\"\");\n  const [description, setDescription] = React.useState(\"\");\n  const [assigneeId, setAssigneeId] = React.useState(\"\");\n  const [toBeFinishedAt, setToBeFinishedAt] = React.useState(\"\");\n\n  const assignSelectOptions = users.map(u => ({ label: u.name, value: u.id }));\n\n  const buttonDisabled =\n    title === \"\" || description === \"\" || assigneeId === \"\" || toBeFinishedAt === \"\" || parseDate(toBeFinishedAt) === \"\";\n\n  return (\n    <Form>\n      <Input label=\"Name\" value={title} onChange={setTitle} />\n      <Input label=\"Finish until (DD.MM.YYYY)\" value={toBeFinishedAt} onChange={setToBeFinishedAt} />\n      <Select label=\"Assign to\" value={assigneeId} options={assignSelectOptions} onNewValue={setAssigneeId} />\n      <TextArea label=\"Description\" value={description} onChange={setDescription} />\n\n      <ButtonBar>\n        <Button secondary onClick={onCancel}>\n          Cancel\n        </Button>\n        <Button\n          disabled={buttonDisabled}\n          onClick={() => {\n            onSave({\n              assigneeId,\n              description,\n              title,\n              toBeFinishedAt: parseDate(toBeFinishedAt)\n            });\n          }}\n        >\n          Save\n        </Button>\n      </ButtonBar>\n    </Form>\n  );\n}\n","import * as React from \"react\";\n\nimport styles from \"./AddTaskPage.module.scss\";\nimport gql from \"graphql-tag\";\nimport { Mutation, Query } from \"@apollo/react-components\";\nimport { withApollo } from \"@apollo/react-hoc\";\nimport { AddTaskPageQuery, AddTaskPageQueryVariables } from \"./querytypes/AddTaskPageQuery\";\nimport { useNavigator } from \"../infra/NavigationProvider\";\nimport { RouteComponentProps } from \"react-router\";\nimport { AddTaskForm } from \"./AddTaskForm\";\nimport { AddTaskMutation, AddTaskMutationVariables } from \"./querytypes/AddTaskMutation\";\n\nconst ADD_TASK_PAGE_QUERY = gql`\n  query AddTaskPageQuery($projectId: ID!) {\n    project(id: $projectId) {\n      # id fetched for apollo cache only\n      id\n      title\n    }\n\n    users {\n      name\n      id\n    }\n  }\n`;\n\nconst ADD_TASK_MUTATION = gql`\n  mutation AddTaskMutation($projectId: ID!, $newTask: AddTaskInput!) {\n    addTask(projectId: $projectId, input: $newTask) {\n      id\n    }\n  }\n`;\n\ninterface AddTaskPageProps extends RouteComponentProps<{ projectId: string }> {}\n\nfunction AddTaskPage({ match }: AddTaskPageProps) {\n  const projectId = match.params.projectId;\n\n  const navigator = useNavigator();\n\n  return (\n    <div className={styles.AddTaskPage}>\n      <Query<AddTaskPageQuery, AddTaskPageQueryVariables> query={ADD_TASK_PAGE_QUERY} variables={{ projectId }}>\n        {({ loading, error, data }) => {\n          if (loading) {\n            return <h1>Loading...</h1>;\n          }\n\n          if (error || !data) {\n            console.error(error);\n            return <h1>Loading users failed</h1>;\n          }\n\n          const { project, users } = data;\n\n          if (!project) {\n            return <h1>Project not found</h1>;\n          }\n\n          return (\n            <Mutation<AddTaskMutation, AddTaskMutationVariables>\n              mutation={ADD_TASK_MUTATION}\n              onCompleted={() => navigator.openTasksPage(projectId)}\n            >\n              {addTask => {\n                return (\n                  <>\n                    <header>\n                      <h1>{project.title} - Add new Task</h1>\n                    </header>\n                    <AddTaskForm\n                      users={users}\n                      onSave={newTask => {\n                        addTask({\n                          variables: {\n                            projectId,\n                            newTask\n                          }\n                        });\n                      }}\n                      onCancel={() => navigator.openTasksPage(projectId)}\n                    />\n                  </>\n                );\n              }}\n            </Mutation>\n          );\n        }}\n      </Query>\n    </div>\n  );\n}\n\nexport default withApollo(AddTaskPage);\n","import * as React from \"react\";\nimport styles from \"./NavButton.module.scss\";\n\nimport Octicon, { ChevronRight } from \"@primer/octicons-react\";\n\ninterface NavButtonProps {\n  onClick: React.MouseEventHandler<HTMLElement>;\n}\n\nexport default function NavButton({ onClick }: NavButtonProps) {\n  return (\n    <button className={styles.NavButton} onClick={onClick}>\n      <Octicon icon={ChevronRight} />\n    </button>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./ProjectsPage.module.scss\";\nimport NavButton from \"../components/NavButton\";\nimport { useNavigator } from \"../infra/NavigationProvider\";\nimport gql from \"graphql-tag\";\nimport { ProjectsPageQuery, ProjectsPageQuery_projects } from \"./querytypes/ProjectsPageQuery\";\nimport { Query } from \"@apollo/react-components\";\n\nconst PROJECTS_PAGE_QUERY = gql`\n  query ProjectsPageQuery {\n    projects {\n      id\n      title\n      owner {\n        name\n      }\n      category {\n        name\n      }\n    }\n  }\n`;\n\ninterface ProjectsTableProps {\n  projects: ProjectsPageQuery_projects[];\n}\nfunction ProjectsTable({ projects }: ProjectsTableProps) {\n  const navigator = useNavigator();\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Owner</th>\n          <th>Category</th>\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {projects.map(project => {\n          return (\n            <tr key={project.id}>\n              <td>{project.title}</td>\n              <td>{project.owner.name}</td>\n              <td>{project.category.name}</td>\n              <td>\n                <NavButton onClick={() => navigator.openTasksPage(project.id)} />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function ProjectsPage() {\n  return (\n    <div className={styles.ProjectsPage}>\n      <header>\n        <h1>Your Projects</h1>\n      </header>\n      <Query<ProjectsPageQuery> query={PROJECTS_PAGE_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) {\n            return <h2>Loading...</h2>;\n          }\n          if (error || !data) {\n            return <h2>Sorry... Something failed while loading data </h2>;\n          }\n\n          return <ProjectsTable projects={data.projects} />;\n        }}\n      </Query>\n    </div>\n  );\n}\n","/* tslint:disable */\n/* eslint-disable */\n// This file was automatically generated and should not be edited.\n\n//==============================================================\n// START Enums and Input Objects\n//==============================================================\n\nexport enum TaskState {\n  FINISHED = \"FINISHED\",\n  NEW = \"NEW\",\n  RUNNING = \"RUNNING\",\n}\n\nexport interface AddTaskInput {\n  title: string;\n  description: string;\n  toBeFinishedAt: string;\n  assigneeId: string;\n}\n\n//==============================================================\n// END Enums and Input Objects\n//==============================================================\n","import { TaskState } from \"../global-query-types\";\n\nexport function mapTaskState(taskState: TaskState) {\n  switch (taskState) {\n    case TaskState.FINISHED:\n      return \"Finished\";\n    case TaskState.NEW:\n      return \"New\";\n    case TaskState.RUNNING:\n      return \"In Progress\";\n    default:\n      console.warn(\"Unknown state: \", taskState);\n  }\n\n  return taskState;\n}\n","import NavButton from \"../components/NavButton\";\nimport styles from \"./TaskListPage.module.scss\";\nimport Button from \"../components/Button\";\nimport { ChevronRight } from \"@primer/octicons-react\";\nimport * as React from \"react\";\nimport { useNavigator } from \"../infra/NavigationProvider\";\nimport gql from \"graphql-tag\";\nimport { RouteComponentProps } from \"react-router\";\nimport { TaskListPageQuery, TaskListPageQuery_project_tasks, TaskListPageQueryVariables } from \"./querytypes/TaskListPageQuery\";\nimport { mapTaskState } from \"../util/mapper\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Link } from \"react-router-dom\";\n\nconst TASK_LIST_PAGE_QUERY = gql`\n  query TaskListPageQuery($projectId: ID!) {\n    project(id: $projectId) {\n      title\n      id\n      tasks {\n        id\n        title\n        assignee {\n          name\n        }\n        state\n      }\n    }\n  }\n`;\n\nconst TASK_CHANGE_SUBSCRIPTION = gql`\n  subscription TaskChangeSubscription($projectId: ID!) {\n    onTaskChange(projectId: $projectId) {\n      id\n      state\n    }\n  }\n`;\n\ntype TasksPageTableProps = {\n  projectId: string;\n  tasks: TaskListPageQuery_project_tasks[];\n};\nfunction TasksTable({ projectId, tasks }: TasksPageTableProps) {\n  const navigator = useNavigator();\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Assignee</th>\n          <th>State</th>\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {tasks.map(task => {\n          return (\n            <tr key={task.id}>\n              <td>{task.title}</td>\n              <td>{task.assignee.name}</td>\n              <td>{mapTaskState(task.state)}</td>\n              <td>\n                <NavButton onClick={() => navigator.openTaskPage(projectId, task.id)} />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\ntype TaskListPageProps = RouteComponentProps<{ projectId: string }>;\n\nexport default function TaskListPage(props: TaskListPageProps) {\n  const projectId = props.match.params.projectId;\n  const navigator = useNavigator();\n\n  const { loading, error, data, subscribeToMore } = useQuery<TaskListPageQuery, TaskListPageQueryVariables>(\n    TASK_LIST_PAGE_QUERY,\n    {\n      fetchPolicy: \"cache-and-network\",\n      variables: { projectId }\n    }\n  );\n\n  React.useEffect(() => {\n    if (subscribeToMore && projectId) {\n      return subscribeToMore({\n        document: TASK_CHANGE_SUBSCRIPTION,\n        variables: { projectId }\n      });\n    }\n  }, [projectId, subscribeToMore]);\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  if (error || !data) {\n    return <h2>Sorry... Something failed while loading data </h2>;\n  }\n\n  if (!data.project) {\n    return <h2>Project not found!</h2>;\n  }\n\n  return (\n    <div className={styles.TaskListPage}>\n      <header>\n        <h1>\n          <Link to=\"/\">Projects</Link> > {data.project.title} Tasks\n        </h1>\n      </header>\n      <TasksTable projectId={data.project.id} tasks={data.project.tasks} />\n      <div className={styles.ButtonBar}>\n        <Button onClick={e => navigator.openAddTaskPage(projectId)} icon={ChevronRight}>\n          Add Task\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./Cardboard.module.scss\";\n\ninterface CardsProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport default function Cardboard({ children, className }: CardsProps) {\n  const cardboardClassName = className ? `${styles.Cardboard} ${className}` : styles.Cardboard;\n  return <div className={cardboardClassName}>{children}</div>;\n}\n","import * as React from \"react\";\nimport styles from \"./Card.module.scss\";\nimport Button from \"./Button\";\nimport ButtonBar from \"./ButtonBar\";\n\ntype CardProps = {\n  children: React.ReactNode;\n};\nexport default function Card({ children }: CardProps) {\n  return <div className={styles.Card}>{children}</div>;\n}\n\ntype InfoCardAction = {\n  label: string;\n  onExecute(): void;\n};\n\ntype InfoCardProps = {\n  label: React.ReactNode;\n  title: React.ReactNode;\n\n  actions?: InfoCardAction[];\n};\n\nexport function InfoCard({ title, label, actions }: InfoCardProps) {\n  const cardActions = actions ? (\n    <ButtonBar left>\n      {actions.map((a, ix) => (\n        <Button key={ix} tertiary onClick={a.onExecute}>\n          {a.label}\n        </Button>\n      ))}\n    </ButtonBar>\n  ) : null;\n\n  return (\n    <Card>\n      <div className={styles.CardLabel}>{label}</div>\n      <div className={styles.CardTitle}>{title}</div>\n      {cardActions}\n    </Card>\n  );\n}\n","import { TaskPageQuery_project_task } from \"./querytypes/TaskPageQuery\";\nimport Cardboard from \"../components/Cardboard\";\nimport styles from \"./TaskPage.module.scss\";\nimport Card, { InfoCard } from \"../components/Card\";\nimport { mapTaskState } from \"../util/mapper\";\nimport * as React from \"react\";\nimport moment from \"moment\";\nimport { TaskState } from \"global-query-types\";\n\ninterface TaskViewProps {\n  task: TaskPageQuery_project_task;\n\n  onTaskStateChange(task: TaskPageQuery_project_task, newState: TaskState): void;\n}\n\nexport default function TaskView({ task, onTaskStateChange }: TaskViewProps) {\n  const finishedUntil = moment(task.toBeFinishedAt);\n  const finishedUntilString = finishedUntil.format(\"MMM D, YYYY\");\n\n  const actions = [\n    {\n      label: \"Start\",\n      onExecute: () => onTaskStateChange(task, TaskState.RUNNING)\n    },\n    {\n      label: \"Stop\",\n      onExecute: () => onTaskStateChange(task, TaskState.FINISHED)\n    }\n  ];\n\n  return (\n    <>\n      <Cardboard className={styles.TaskStateCardboard}>\n        <InfoCard label=\"To be finished until\" title={finishedUntilString} />\n        <InfoCard label={\"Assignee\"} title={task.assignee.name} />\n        <InfoCard label=\"State\" title={mapTaskState(task.state)} actions={actions} />\n      </Cardboard>\n\n      <h1>Description</h1>\n      <Card>{task.description}</Card>\n    </>\n  );\n}\n","import { TaskPageQuery_project } from \"./querytypes/TaskPageQuery\";\nimport { Link } from \"react-router-dom\";\nimport * as React from \"react\";\n\ninterface TaskPageHeaderProps {\n  project: TaskPageQuery_project;\n}\nexport default function TaskPageHeader({ project }: TaskPageHeaderProps) {\n  const { task } = project;\n\n  const projectListLink = <Link to=\"/\">Projects</Link>;\n\n  const titleLink = <Link to={`/project/${project.id}/tasks`}>{project.title}</Link>;\n\n  const titleElement = task ? (\n    <h1>\n      {projectListLink} > {titleLink} > {task.title}\n    </h1>\n  ) : (\n    <h1>\n      {projectListLink} > {titleLink}\n    </h1>\n  );\n\n  return <header>{titleElement}</header>;\n}\n","import * as React from \"react\";\nimport styles from \"./TaskPage.module.scss\";\nimport { RouteComponentProps } from \"react-router\";\nimport gql from \"graphql-tag\";\nimport { TaskPageQuery, TaskPageQueryVariables, TaskPageQuery_project_task } from \"./querytypes/TaskPageQuery\";\nimport TaskView from \"./TaskView\";\nimport TaskPageHeader from \"./TaskPageHeader\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { TaskState } from \"global-query-types\";\nimport { UpdateTaskStateMutation, UpdateTaskStateMutationVariables } from \"./querytypes/UpdateTaskStateMutation\";\n\nconst TASK_QUERY = gql`\n  query TaskPageQuery($projectId: ID!, $taskId: ID!) {\n    project(id: $projectId) {\n      id\n      title\n      task(id: $taskId) {\n        id\n        title\n        description\n        assignee {\n          name\n        }\n        toBeFinishedAt\n        state\n      }\n    }\n  }\n`;\n\nconst UPDATE_TASK_STATE_MUTATION = gql`\n  mutation UpdateTaskStateMutation($taskId: ID!, $newState: TaskState!) {\n    updateTaskState(taskId: $taskId, newState: $newState) {\n      id\n      state\n    }\n  }\n`;\n\ntype TaskPageProps = RouteComponentProps<{ projectId: string; taskId: string }>;\n\nexport default function TaskPage(props: TaskPageProps) {\n  const projectId = props.match.params.projectId;\n  const taskId = props.match.params.taskId;\n\n  const { loading, error, data } = useQuery<TaskPageQuery, TaskPageQueryVariables>(TASK_QUERY, {\n    variables: { projectId, taskId }\n  });\n\n  const [runChangeTaskState] = useMutation<UpdateTaskStateMutation, UpdateTaskStateMutationVariables>(UPDATE_TASK_STATE_MUTATION);\n\n  async function changeTaskState(task: TaskPageQuery_project_task, newState: TaskState) {\n    await runChangeTaskState({\n      variables: {\n        taskId: task.id,\n        newState\n      }\n    });\n  }\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  if (error || !data) {\n    return <h2>Sorry... Something failed while loading data </h2>;\n  }\n\n  if (!data.project) {\n    return <h2>Project not found!</h2>;\n  }\n\n  return (\n    <div className={styles.TaskPage}>\n      <TaskPageHeader project={data.project} />\n      {data.project.task ? (\n        <TaskView task={data.project.task} onTaskStateChange={changeTaskState} />\n      ) : (\n        <h2>Task cannot be found</h2>\n      )}\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport styles from \"./ProjectApp.module.scss\";\nimport AddTaskPage from \"../AddTaskPage/AddTaskPage\";\nimport { Route, Switch } from \"react-router\";\nimport ProjectsPage from \"../ProjectsPage\";\nimport TaskListPage from \"../TasksListPage\";\nimport { Link } from \"react-router-dom\";\nimport { ApolloClient } from \"apollo-client\";\nimport { withApollo } from \"@apollo/react-hoc\";\nimport TaskPage from \"../TaskPage/TaskPage\";\n\nfunction Header() {\n  return (\n    <header className={styles.Header}>\n      <Link to={\"/\"}>Personal Project Planning</Link>\n    </header>\n  );\n}\n\nfunction Footer() {\n  return (\n    <footer className={styles.Footer}>\n      <a href=\"https://github.com/nilshartmann/graphql-workshop\" target=\"_blank\" rel=\"noopener noreferrer\">\n        https://github.com/nilshartmann/graphql-workshop\n      </a>\n    </footer>\n  );\n}\ninterface ProjectAppProps {\n  client: ApolloClient<any>;\n}\n\nexport function ProjectApp({ client }: ProjectAppProps) {\n  return (\n    <div className={styles.ProjectApp}>\n      <Header />\n      <main>\n        <Switch>\n          <Route exact path={\"/\"} component={ProjectsPage} />\n          <Route exact path={\"/project/:projectId/tasks\"} component={TaskListPage} />\n          <Route exact path={\"/project/:projectId/tasks/:taskId\"} component={TaskPage} />\n          <Route exact path={\"/project/:projectId/addtaks\"} component={AddTaskPage} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nexport default withApollo<{}>(ProjectApp);\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport createApolloClient from \"./infra/createApolloClient\";\nimport NavigationProvider from \"./infra/NavigationProvider\";\nimport ProjectApp from \"./ProjectApp/ProjectApp\";\n\nconst client = createApolloClient();\n\nconst theApp = (\n  <ApolloProvider client={client}>\n    <Router>\n      <NavigationProvider>\n        <ProjectApp />\n      </NavigationProvider>\n    </Router>\n  </ApolloProvider>\n);\n\nconst mountNode = document.getElementById(\"root\");\nReactDOM.render(theApp, mountNode);\n"],"sourceRoot":""}