# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"""
Projects are ground into user-defined categories
(like 'Private', 'Business', 'Hobby',...)
"""
type Category {
    id: ID!
    name: String!
}

type Mutation {
    """
    Create a new Task. Returns the task just created, populated with
    its server-side generated ID
    """
    addTask(input: AddTaskInput!, projectId: ID!): Task!
    "Change the state of the specified task"
    updateTaskState(newState: TaskState!, taskId: ID!): Task!
}

"""
A **Project** is the central entity in our system.

It is owned by a **User**
and have 0..n **Tasks** assigned to it. Projects can be grouped by a **Category**
to make management easier.
"""
type Project {
    category: Category!
    """
    A description of this project in deep detail so others can
    unterstand the goals and constraints of this project.
    """
    description: String!
    id: ID!
    "The project owner"
    owner: User!
    """
    Get a task by it's unique id. Return null if that
    task could not be found
    """
    task(id: ID!): Task
    """
    You split your Project into several tasks that you
    # have to work on to finish this Project's goal
    """
    tasks: [Task!]!
    "A a simple, concise title for your project"
    title: String!
}

type Query {
    "Returns hello world when the server is running"
    ping: String!
    project(id: ID!): Project
    "Return an unordered list of all projects"
    projects: [Project!]!
    user(id: ID!): User
    users: [User!]!
}

type Subscription {
    onNewTask(projectId: ID): Task!
    onTaskChange(projectId: ID): Task!
}

"""
A Task is part of a Project. It represents an actual
task of a Tasks that needs to be fulfilled
to complete the Project
"""
type Task {
    "Who works on this Task or should work on the task"
    assignee: User!
    """
    A complete and detailed description what should be done in this task.
    The description should be understandable also by people that are not
    familiar with this task, so they can get into without having
    to ask for further details
    """
    description: String!
    id: ID!
    state: TaskState!
    "A concicse title of this task, that describes what to do"
    title: String!
    "Deadline for this task"
    toBeFinishedAt: String!
}

"A User describes an actor in the system"
type User {
    id: ID!
    "The login is used by the user to log in to our System"
    login: String!
    "The human readable name of the person"
    name: String!
    """
    For Debugging: a unique \"id\" that is generate inside the Userservice for each request
    Having this id one can verify if a resource comes from the apollo cache
    (that is requestId does not change) or if it's actually (re-)fetched from the service
    """
    requestId: String!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum TaskState {
    FINISHED
    NEW
    RUNNING
}

input AddTaskInput {
    assigneeId: ID!
    description: String!
    title: String!
    """
    The date when this task should be finished.

    If the date is not specified, it's automatically set to
    14 days from now
    """
    toBeFinishedAt: String
}


"The `Upload` scalar type represents a file upload."
scalar Upload